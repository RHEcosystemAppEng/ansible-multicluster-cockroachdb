# Docs found:
# https://access.redhat.com/documentation/en-us/red_hat_advanced_cluster_management_for_kubernetes/2.5/html/add-ons/add-ons-overview#preparing-azure

#############
## Prereqs ##
#############

- name: Find LoadBalancer name for each Azure cluster
  ansible.builtin.shell: az network lb list |  grep {{ item.name }} | egrep -v "internal|resourceGroup|id|nic" | awk 'FNR == 1 { print $2   }' | sed 's/"//g' | sed 's/,//g'
  register: lb_name_
  loop: "{{ clusters }}"
  when: item.cloud == "azure"

- name: Print the lb names
  debug:
    msg: Load Balancer {{item.stdout}}
  loop: "{{ lb_name_.results }}"
  when: item.changed == true

- name: Find the resource groups for each Azure cluster
  ansible.builtin.shell: az network lb list | grep {{ item.name }} | grep -e -rg | egrep -v '"id":|nic|master' | awk 'FNR == 1 { print $2   }' | sed 's/"//g' | sed 's/,//g'
  register: rg_name_
  loop: "{{ clusters }}"
  when: item.cloud == "azure"

# Ensure correctness
- name: Print the RG names
  debug:
    msg: Resource Group {{item.stdout}}
  loop: "{{ rg_name_.results }}"
  when: item.changed == true 

# Find the first node name so that it can be labeled
- name: Find first worker node on Azure cluster
  ansible.builtin.shell: kubectl get no --context {{ item.contexts }} -l node-role.kubernetes.io/worker --no-headers | awk 'FNR == 1 { print $1 }'
  loop: "{{ clusters }}"
  register: no_name_
  when: item.cloud == "azure"

# Ensure correctness
- name: Print the Node names
  debug:
    msg: Node Names {{ item.stdout }}
  loop: "{{ no_name_.results }}"
  when: item.changed == true

############
## Step 1 ##
############


- name: Label nodes as gateway nodes
  ansible.builtin.shell: kubectl label no {{ item.1.stdout }} "submariner.io/gateway=true" --overwrite --context {{ item.0.contexts }}
  with_together:
  - "{{ clusters }}"
  - "{{ no_name_.results }}"
  register: label_results_
  when: item.0.cloud == "azure"

# Ensure correctness
- name: Print the Node label results
  debug:
    msg: Node label results {{ item.stdout }}
  loop: "{{ label_results_.results }}"
  when: item.changed == true

############
## Step 2 ##
############

# - name: Create a public IP
#   ansible.builtin.shell: az network public-ip create --name {{ item.0.name}}-pip --resource-group {{ item.1.stdout }}
#   register: pip_results_
#   with_together:
#   - "{{ clusters }}"
#   - "{{ rg_name_.results }}"
#   when: item.0.cloud == "azure"

# # Ensure correctness
# - name: Create the public ip results
#   debug:
#     msg: Create Public IP Results {{ item.stdout }}
#   loop: "{{ pip_results_.results }}"
#   when: item.changed == true

# az network lb show -n jp-test2-dc5d6 -g jp-test2-dc5d6-rg  | grep nic | grep jp-test2-dc5d6-worker-centralus1-dqrdl | grep -v '"id"' | sed 's/"//g' | sed 's/name: //g' | sed 's/ //g' | sed 's/,//g'
- name: Find the NIC Name of the gateway Node
  ansible.builtin.shell: az network lb show -g {{ item.2.stdout }}  -n {{ item.1.stdout }}  | grep nic | grep {{ item.3.stdout }} | grep nic | grep -v '"name"' | sed 's/ //g' | sed 's/id//g' | sed 's/"//g' | sed 's/://g' | awk 'FNR == 1 { print $1 }' | awk -F '/' '{print $9}'
  register: nic_name_
  with_together:
  - "{{ clusters }}"
  - "{{ lb_name_.results }}"
  - "{{ rg_name_.results }}"
  - "{{ no_name_.results }}"
  when: item.0.cloud == "azure"

# Ensure correctness
- name: Display NIC Name gateway nodes
  debug:
    msg: Nic Name {{ item.stdout }}
  loop: "{{ nic_name_.results }}"
  when: item.changed == true

- name: Find NIC interface addresses
  ansible.builtin.shell:  az network nic ip-config list --resource-group {{ item.1.results }} --nic-name {{ item.2.results }} | jq -r ' .[0] | .privateIpAddress'
  register: nic_address_
  with_together:
  - "{{ clusters }}"
  - "{{ rg_name_.results }}"
  - "{{ nic_name_.results }}"
  when: item.0.cloud == "azure"

# Ensure correctness
- name: Display NIC interface addresses
  debug:
    msg: Nic interface address {{ item.stdout }}
  loop: "{{ nic_address_.results }}"
  when: item.changed == true

- name: Find NIC PIP Config of gateway nodes
  ansible.builtin.shell: az network lb show -g {{ item.2.stdout }}  -n {{ item.1.stdout }}  | grep nic | grep {{ item.3.stdout }} |  grep -v '"id"' | sed 's/ //g' | sed 's/"//g' | sed 's/name://g'  | sed 's/,//g' 
  register: nic_pip_name_
  with_together:
  - "{{ clusters }}"
  - "{{ lb_name_.results }}"
  - "{{ rg_name_.results }}"
  - "{{ no_name_.results }}"
  when: item.0.cloud == "azure"

# Ensure correctness
- name: Display NIC PIP of gateway nodes
  debug:
    msg: Nic PIP Results {{ item.stdout }}
  loop: "{{ nic_pip_name_.results }}"
  when: item.changed == true

- name: Assign Public IP to the VM of gateway node
  ansible.builtin.shell: az network nic ip-config update --name {{ item.1.stdout }} --nic-name {{ item.3.stdout }}  --resource-group {{ item.2.stdout }}  --public-ip-address {{ item.0.name }}-pip
  register: nic_pip_update
  with_together:
  - "{{ clusters }}"
  - "{{ nic_pip_name_.results }}"
  - "{{ rg_name_.results }}"
  - "{{ nic_name_.results }}"
  when: item.0.cloud == "azure"

# Ensure correctness
- name: Display NIC PIP config update results
  debug:
    msg: Assign Public IP to gateway node Results {{ item.stdout }}
  loop: "{{ nic_pip_update.results }}"
  when: item.changed == true

############
## Step 3 ##
############

- name: Create NSG for Submariner GW
  ansible.builtin.shell: az network nsg create --name {{ item.0.name }}-nsg    --resource-group {{ item.1.stdout }}
  register: nsg_create_
  with_together:
  - "{{ clusters }}"
 - "{{ rg_name_.results }}"
  when: item.0.cloud == "azure"

# Ensure correctness
- name: Display created network security groups 
  debug:
    msg: Created NSG {{ item.stdout }}
  loop: "{{ nsg_create_.results }}"
  when: item.changed == true

############
## Step 4 ##
############

- name: NSG Rule to open Inbound ports 4500,4490, and 8080 for Submariner 
  ansible.builtin.shell: az network nsg create  --resource-group {{ item.1.stdout }} --nsg-name {{ item.0.name }}-nsg --priority 501  --name {{ item.0.name }}-inbound --direction Inbound --access Allow --protocol * --destination-port-ranges 4500 4490 8080 8181
  register: nsg_inbound_create_
  with_together:
  - "{{ clusters }}"
 - "{{ rg_name_.results }}"
  when: item.0.cloud == "azure"

# Ensure correctness
- name: Check NSG Inbound Rules 
  debug:
    msg: NSG Inbound Rules results {{ item.stdout }}
  loop: "{{ nsg_inbound_create_.results }}"
  when: item.changed == true

- name: NSG Rule to open Outbound ports 4500,4490, and 8080 for Submariner 
  ansible.builtin.shell: az network nsg create  --resource-group {{ item.1.stdout }} --nsg-name {{ item.0.name }}-nsg --priority 501  --name {{ item.0.name }}-outbound --direction Outbound --access Allow --protocol * --destination-port-ranges 4500 4490 8080 8181
  register: nsg_outbound_create_
  with_together:
  - "{{ clusters }}"
 - "{{ rg_name_.results }}"
  when: item.0.cloud == "azure"

# Ensure correctness
- name: Check NSG Outbound Rules 
  debug:
    msg: NSG Outbound Rules results {{ item.stdout }}
  loop: "{{ nsg_outbound_create_.results }}"
  when: item.changed == true


############
## Step 5 ##
############

- name: Attach the Security Group to the Gatewaty VM Interface
  ansible.builtin.shell: az network nic update -g {{ item.1.stdout }} -n <g2-vm-nic> --network-security-group {{ item.0.name }}-nsg 
  register: sg_attach_output
  with_together:
  - "{{ clusters }}"
 - "{{ rg_name_.results }}"
  when: item.0.cloud == "azure"

# Ensure correctness
- name: Output from attach Security Group to VM Interface
  debug:
    msg: Attach Security group to vm inteface results {{ item.stdout }}
  loop: "{{ sg_attach_output.results }}"
  when: item.changed == true

############
## Step 6 ##
############

- name: NSG Rules to open VXLAN inbound port 4800/UDP -n existing NSG
  ansible.builtin.shell: az network nsg rule create --resource-group {{ item.1.stdout }} --nsg-name {{ item.0.name }}-nsg --priority 501 --name {{ item.0.name }}-vxlan-inbound --direction Inbound --access Allow --protocol * --destination-port-ranges 4800
  register: vxlan_inbound_
  with_together:
  - "{{ clusters }}"
 - "{{ rg_name_.results }}"
  when: item.0.cloud == "azure"

# Ensure correctness
- name: Output VXLAN inbound port
  debug:
    msg: VXLAN inbound port results {{ item.stdout }}
  loop: "{{ vxlan_inbound_.results }}"
  when: item.changed == true


- name: NSG Rules to open VXLAN outbound port 4800/UDP -n existing NSG
  ansible.builtin.shell: az network nsg rule create --resource-group {{ item.1.stdout }} --nsg-name {{ item.0.name }}-nsg --priority 501 --name {{ item.0.name }}-vxlan-outbound --direction Outbound --access Allow --protocol * --destination-port-ranges 4800
  register: vxlan_outbound_
  with_together:
  - "{{ clusters }}"
 - "{{ rg_name_.results }}"
  when: item.0.cloud == "azure"

# Ensure correctness
- name: Output VXLAN outbound port
  debug:
    msg: VXLAN inbound port results {{ item.stdout }}
  loop: "{{ vxlan_outbound_.results }}"
  when: item.changed == true

############
## Extras ##
############


- name: Find the public IP name for each Azure cluster
  ansible.builtin.shell: az network lb show -g {{ item.2.stdout }}  -n {{ item.1.stdout }} --query "frontendIpConfigurations[].publicIpAddress.id" --out tsv | awk 'FNR==2 { print $1 }'  | awk -F '/' '{print $9}'
  register: ip_name_
  with_together:
  - "{{ clusters }}"
  - "{{ lb_name_.results }}"
  - "{{ rg_name_.results }}"
  when: item.0.cloud == "azure"

- name: Print the public ip names
  debug:
    msg: IP name {{item.stdout}}
  loop: "{{ ip_name_.results }}"
  when: item.changed == true 


- name: Check Azure variables
  debug:
    msg: LB={{ item.1.stdout}}  ResourceGroup={{ item.2.stdout}} NatRule={{item.0.name}}-nr NSG={{item.0.name}}-nsg IpName={{item.3.stdout}} NicName={{item.0.name}}-nic IpConfig
  with_together:
  - "{{ clusters }}"
  - "{{ lb_name_.results }}"
  - "{{ rg_name_.results }}"
  - "{{ ip_name_.results }}"
  loop_control:
    index_var: my_idx
  when: item.0.cloud == "azure"
# pip = public ip
