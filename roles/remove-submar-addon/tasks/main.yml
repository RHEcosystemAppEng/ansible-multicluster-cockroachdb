---
- name: Remove Submariner ManagedClusterAddon from the managed clusters
  kubernetes.core.k8s:
    state: absent
    wait: yes
    definition:
      apiVersion: addon.open-cluster-management.io/v1alpha1
      kind: ManagedClusterAddOn
      metadata:
          name: submariner
          namespace: "{{ item.name }}"
      spec:
          installNamespace: submariner-operator
  loop: "{{ clusters }}"

- name: Remove submariner addon GCP
  kubernetes.core.k8s:
    state: absent
    wait: yes
    definition:
      apiVersion: submarineraddon.open-cluster-management.io/v1alpha1
      kind: SubmarinerConfig
      metadata:
          name: submariner
          namespace: "{{ item.name }}"
      spec:
          credentialsSecret:
            name: "{{ item.name }}-gcp-creds"
  loop: "{{ clusters }}"
  when: item.cloud == "gcp"

- name: Remove submariner addon AWS
  kubernetes.core.k8s:
    state: absent
    wait: yes
    definition:
      apiVersion: submarineraddon.open-cluster-management.io/v1alpha1
      kind: SubmarinerConfig
      metadata:
          name: submariner
          namespace: "{{ item.name }}"
      spec:
          credentialsSecret:
            name: "{{ item.name }}-aws-creds"
  loop: "{{ clusters }}"
  when: item.cloud == "aws"

- name: Remove secret for GCP credentials
  kubernetes.core.k8s:
    state: absent
    wait: yes
    context: "{{ hub_context }}"
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
          name: "{{ item.name }}-gcp-creds"
          namespace: "{{ item.name }}"
      type: Opaque
      data:
          osServiceAccount.json: "{{ lookup('env', 'OCP_SERVICE_ACCOUNT') | b64encode }}"
  loop: "{{ clusters }}"
  when: item.cloud == "gcp"

- name: Remove secret for AWS credentials
  kubernetes.core.k8s:
    state: absent
    wait: yes
    context: "{{ hub_context }}"
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
          name: "{{ item.name }}-aws-creds"
          namespace: "{{ item.name }}"
      type: Opaque
      data:
          aws_access_key_id: "{{ lookup('env', 'AWS_ACCESS_KEY') | b64encode }}"
          aws_secret_access_key: "{{ lookup('env', 'AWS_SECRET_KEY') | b64encode }}"
  loop: "{{ clusters }}"
  when: item.cloud == "aws"

# Azure pre-delete
- name: Find LoadBalancer name for each Azure cluster
  ansible.builtin.shell: az network lb list |  grep {{ item.name }} | egrep -v "internal|resourceGroup|id|nic" | awk 'FNR == 1 { print $2   }' | sed 's/"//g' | sed 's/,//g'
  # az network lb list |  grep {{ item.name }} | egrep -v "internal|resourceGroup|id|nic" | awk 'FNR == 1 { print $2   }' | sed 's/"//g' | sed 's/,//g'
  register: lb_name_
  loop: "{{ clusters }}"
  when: item.cloud == "azure"

# Azure pre-delete
- name: Find the resource groups for each Azure cluster
  ansible.builtin.shell: az network lb list | grep {{ item.name }} | grep -e -rg | egrep -v '"id":|nic|master' | awk 'FNR == 1 { print $2   }' | sed 's/"//g' | sed 's/,//g'
  register: rg_name_
  loop: "{{ clusters }}"
  when: item.cloud == "azure"

# Azure pre-delete
- name: Find first worker node on Azure cluster
  ansible.builtin.shell: kubectl get no --context {{ item.contexts }} -l node-role.kubernetes.io/worker --no-headers | awk 'FNR == 1 { print $1 }'
  loop: "{{ clusters }}"
  register: no_name_
  when: item.cloud == "azure"


# Azure Delete
- name: Delete NSG Rules VXLAN inbound port 4800/UDP in existing NSG
  ansible.builtin.shell: az network nsg rule delete --resource-group {{ item.1.stdout }} --nsg-name {{ item.0.name }}-nsg --name {{ item.0.name }}-vxlan-inbound 
  register: vxlan_inbound_
  with_together:
  - "{{ clusters }}"
  - "{{ rg_name_.results }}"
  when: item.0.cloud == "azure"

# Azure Delete
- name: Delete NSG Rule VXLAN outbound port 4800/UDP in existing NSG
  ansible.builtin.shell: az network nsg rule delete --resource-group {{ item.1.stdout }} --nsg-name {{ item.0.name }}-nsg --name {{ item.0.name }}-vxlan-outbound
  register: vxlan_outbound_
  with_together:
  - "{{ clusters }}"
  - "{{ rg_name_.results }}"
  when: item.0.cloud == "azure"

# Azure Delete
- name: Delete NSG Rule to open Inbound ports 4500,4490, and 8080
  ansible.builtin.shell: az network nsg rule delete  --resource-group {{ item.1.stdout }} --nsg-name {{ item.0.name }}-nsg --name {{ item.0.name }}-inbound
  register: nsg_inbound_create_
  with_together:
  - "{{ clusters }}"
  - "{{ rg_name_.results }}"
  when: item.0.cloud == "azure"

# Azure Delete
- name: Delete NSG Rule Outbound ports 4500,4490, and 8080
  ansible.builtin.shell: az network nsg rule delete  -g {{ item.1.stdout }} --nsg-name {{ item.0.name }}-nsg --name {{ item.0.name }}-outbound
  register: nsg_outbound_create_
  with_together:
  - "{{ clusters }}"
  - "{{ rg_name_.results }}"
  when: item.0.cloud == "azure"

# Azure Delete
- name: Delete the public IP
  ignore_errors: yes
  ansible.builtin.shell: az network public-ip delete --name {{ item.0.name}}-pip --resource-group {{ item.1.stdout }} --sku Standard
  register: pip_results_
  with_together:
  - "{{ clusters }}"
  - "{{ rg_name_.results }}"
  when: item.0.cloud == "azure"

# Azure Delete
- name: Unlabel nodes as gateway nodes
  ansible.builtin.shell: kubectl label no {{ item.1.stdout }} "submariner.io/gateway-" --overwrite --context {{ item.0.contexts }}
  with_together:
  - "{{ clusters }}"
  - "{{ no_name_.results }}"
  register: label_results_
  when: item.0.cloud == "azure"

# Azure Delete
- name: Delete NSG for Submariner GW
  ignore_errors: yes
  ansible.builtin.shell: az network nsg delete --name {{ item.0.name }}-nsg --resource-group {{ item.1.stdout }}
  register: nsg_create_
  with_together:
  - "{{ clusters }}"
  - "{{ rg_name_.results }}"
  when: item.0.cloud == "azure"

- name: Pause and wait to delete clusterset
  pause:
    seconds: 20