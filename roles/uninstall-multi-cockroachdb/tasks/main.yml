---
- name: set default for cockroach cli
  set_fact: 
    cockroach: /usr/local/bin/cockroach
  when: cockroach is not defined

- name: set default for kubectl
  set_fact: 
    kubectl: /usr/local/bin/kubectl
  when: kubectl is not defined

- name: Delete directories needed for cockroachdb statefulset
  ignore_errors: yes
  ansible.builtin.file:
    path: "{{ playbook_dir }}/resources"
    state: absent
  
- name: Delete .ssh directory
  ignore_errors: yes
  ansible.builtin.file:
    path: "{{ playbook_dir }}/.ssh"
    state: absent


- name: Delete the serviceExport for cockroachdb service
  kubernetes.core.k8s:
    wait: yes 
    state: absent
    context: "{{ item.contexts }}"
    definition:
      apiVersion: multicluster.x-k8s.io/v1alpha1
      kind: ServiceExport
      metadata:
        name: cockroachdb
        namespace: cockroachdb
  loop: "{{ clusters }}"

- name: Delete cockroachdb subscription in ACM
  kubernetes.core.k8s:
    state: absent
    context: hub
    definition:
      apiVersion: apps.open-cluster-management.io/v1
      kind: Subscription
      metadata:
        name: cockroachdb-app
        namespace: cockroachdb
        labels:
          app: cockroachdb-app
        annotations:
          apps.open-cluster-management.io/github-path: resources/cockroachdb
          apps.open-cluster-management.io/git-branch: main
      spec:
        channel: cockroachdb/cockroachdb-app-latest
        placement:
          placementRef:
            kind: PlacementRule
            name: cockroachdb-clusters
        
- name: Delete cockroachdb Application in ACM
  kubernetes.core.k8s:
    wait: yes
    state: absent
    context: hub
    definition:
      apiVersion: app.k8s.io/v1beta1
      kind: Application
      metadata:
        name: cockroachdb-app
        namespace: cockroachdb
      spec:
        componentKinds:
        - group: apps.open-cluster-management.io
          kind: Subscription
        descriptor: {}
        selector:
          matchLabels:
            app: cockroachdb-app

- name: Delete Channel for cockroachdb application in ACM
  kubernetes.core.k8s:
    wait: yes
    state: absent
    context: hub
    definition:
      apiVersion: apps.open-cluster-management.io/v1
      kind: Channel
      metadata:
        name: cockroachdb-app-latest
        namespace: cockroachdb
      spec:
        type: GitHub
        pathname: "{{ app_repo }}"

- name: Delete cockroachdb PlacementRule in ACM
  kubernetes.core.k8s:
    state: absent
    context: hub
    definition:
      apiVersion: apps.open-cluster-management.io/v1
      kind: PlacementRule
      metadata:
        name: cockroachdb-clusters
        namespace: cockroachdb
      spec:
        clusterConditions:
          - type: ManagedClusterConditionAvailable
            status: "True"
        clusterSelector:
          matchLabels:
            app: cockroachdb-app

- name: Fetch created client certificate and key pair
  ignore_errors: yes
  set_fact:
    var_{{ item.name }}: "{{ lookup('file', '{{ playbook_dir }}/roles/install-multi-cockroachdb/files/certs/{{ item.file }}') }}"
  loop:
    - {file: ca.crt, name: ca_crt}
    - {file: client.root.crt, name: client_root_crt}
    - {file: client.root.key, name: client_root_key}
    - {file: node.crt, name: node_crt}
    - {file: node.key, name: node_key }

- name: Delete cockroachdb.node secret on managed clusters
  ignore_errors: yes
  kubernetes.core.k8s:
    state: absent
    context: "{{ item.contexts }}"
    definition:
      apiVersion: v1
      kind: Secret
      data:
        ca.crt: "{{ var_ca_crt | b64encode }}"
        client.root.crt: "{{ var_client_root_crt | b64encode }}"
        client.root.key: "{{ var_client_root_key | b64encode }}"
        node.crt: "{{ var_node_crt | b64encode }}"
        node.key: "{{ var_node_key | b64encode }}"
      metadata:
        name: cockroachdb.node
        namespace: cockroachdb
      type: Opaque
  loop: "{{ clusters }}"

- name: Delete cockroachdb.client.root secret on managed clusters
  ignore_errors: yes
  kubernetes.core.k8s:
    state: absent
    context: "{{ item.contexts }}"
    definition:
      apiVersion: v1
      kind: Secret
      data:
        ca.crt: "{{ var_ca_crt | b64encode }}"
        client.root.crt: "{{ var_client_root_crt | b64encode }}"
        client.root.key: "{{ var_client_root_key | b64encode }}"
      metadata:
        name: cockroachdb.client.root
        namespace: cockroachdb
      type: Opaque
  loop: "{{ clusters }}"

# This is a precaution, if the certs were not created, but secrets still exist from a past install
# deleting the namespace could be hazardous 
- name: Delete Secrets manually incase last task failed
  ignore_errors: yes
  shell: |
    "{{ kubectl }}" delete secret -n cockroachdb --context "{{ item.contexts }}" --all --wait
  loop: "{{ clusters }}"

- name: Delete cockroachdb namespaces for managed clusters
  kubernetes.core.k8s:
    wait: yes 
    state: absent
    context: "{{ item.contexts }}"
    definition:
      apiVersion: project.openshift.io/v1
      description: cockroachdb
      displayName: cockroachdb
      kind: Project
      metadata:
          name: cockroachdb
  loop: "{{ clusters }}"

- name: Delete cockroachdb namespaces for hub channel
  kubernetes.core.k8s:
    wait: yes 
    state: absent
    context: hub
    definition:
      apiVersion: project.openshift.io/v1
      description: cockroachdb
      displayName: cockroachdb
      kind: Project
      metadata:
          name: cockroachdb

- name: Remove installation files from file directory
  ansible.builtin.file:
    path: "{{ playbook_dir }}/roles/install-multi-cockroachdb/files/certs/"
    state: absent

- name: Remove installation files from file directory
  ansible.builtin.file:
    path: "{{ playbook_dir }}/roles/install-multi-cockroachdb/files/my-safe-directory/"
    state: absent

- name: Remove ClusterRoleBindings for managed clusters
  kubernetes.core.k8s:
    wait: yes
    state: absent
    context: "{{ item.contexts }}"
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        creationTimestamp: null
        name: "cockroach-sa-cluster-admin-binding"
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: cluster-admin
      subjects:
      - apiGroup: rbac.authorization.k8s.io
        kind: Group
        name: system:serviceaccounts:cockroachdb
  loop: "{{ clusters }}"

- name: git push
  include_role:
    name: git-clean
    tasks_from: main