---

- name: Wait till submariner add on install completes 
  kubernetes.core.k8s_info:
    kind: ManagedClusterAddOn 
    name: submariner
    namespace: "{{ item.name }}"
    wait: yes
    context: "{{ hub_context }}"
    wait_sleep: 15
    wait_timeout: 400
    wait_condition:
      type: RegistrationApplied
      status: True
  loop: "{{ clusters }}"

- name: Create variables for join command for each cluster
  set_fact: 
    joinCluster_{{ my_idx }}: "cockroachdb-0.{{ item.contexts }}.cockroachdb.cockroachdb.svc.clusterset.local,cockroachdb-1.{{ item.contexts }}.cockroachdb.cockroachdb.svc.clusterset.local,cockroachdb-2.{{ item.contexts }}.cockroachdb.cockroachdb.svc.clusterset.local"
  loop: "{{ clusters }}"
  loop_control:
    index_var: my_idx

- name: Creat list of join command
  ansible.builtin.set_fact:
    join_command: "{{ join_command | default('') + [vars['joinCluster_' + my_idx|string]] }}"
  loop: "{{ clusters }}"
  loop_control:
    index_var: my_idx

- name: Format join command
  ansible.builtin.set_fact:
    format_join_command: "{{ join_command | join (',') }}"

- name: Dispalying formatted join command 
  ansible.builtin.debug:
    msg: "{{ format_join_command }}"

- name: Create directories needed for cockroachdb statefuleset
  ansible.builtin.file:
    path: "{{ playbook_dir }}/resources/cockroachdb/cluster{{ my_idx }}"
    state: directory
  loop: "{{ clusters }}"
  loop_control:
    index_var: my_idx

- name: Template a file to /etc/file.conf
  ansible.builtin.template:
    src: "{{ role_path }}/templates/cockroachdb-statefulset-secure.yaml"
    dest: "{{ playbook_dir }}/resources/cockroachdb/cluster{{ my_idx }}/cockroachdb-statefulset-secure.yaml"
  loop: "{{ clusters }}"
  loop_control:
    index_var: my_idx

- name: git push
  include_role:
    name: ansible-git
    tasks_from: push

- name: git push
  include_role:
    name: ansible-git
    tasks_from: cleanup_keys

- name: Create cockroachdb namespaces for managed clusters
  kubernetes.core.k8s:
    wait: yes
    state: present
    context: "{{ item.contexts }}"
    definition:
      apiVersion: project.openshift.io/v1
      description: cockroachdb
      displayName: cockroachdb
      kind: Project
      metadata:
          name: cockroachdb
  loop: "{{ clusters }}"

- name: Create cockroachdb namespaces for hub channel
  kubernetes.core.k8s:
    wait: yes
    state: present
    context: "{{ hub_context }}"
    definition:
      apiVersion: project.openshift.io/v1
      description: cockroachdb
      displayName: cockroachdb
      kind: Project
      metadata:
          name: cockroachdb

- name: Create directories needed for cockroachdb certs
  ansible.builtin.file:
    path: "{{ role_path }}/files/{{ item }}"
    state: directory
  loop: 
    - certs
    - my-safe-directory

- name: Create the CA certificate and key pair
  ansible.builtin.command: "{{ cockroach }} cert create-ca --certs-dir={{ role_path }}/files/certs/ --ca-key={{ role_path }}/files/my-safe-directory/ca.key"
  args:
    creates: "{{ role_path }}/files/certs/ca.crt"

- name: Create a client certificate and key pair for the root user
  ansible.builtin.command: "{{ cockroach }} cert create-client root --certs-dir={{ role_path }}/files/certs/ --ca-key={{ role_path }}/files/my-safe-directory/ca.key"
  args:
    creates: "{{ role_path }}/files/certs/client.root.crt"

- name: Fetch created client certificate and key pair
  set_fact:
    var_{{ item.name }}: "{{ lookup('file', '{{ role_path }}/files/certs/{{ item.file }}') }}"
  loop:
    - {file: ca.crt, name: ca_crt}
    - {file: client.root.crt, name: client_root_crt}
    - {file: client.root.key, name: client_root_key}

- name: Create cockroachdb.client.root secret on managed clusters
  kubernetes.core.k8s:
    state: present
    context: "{{ item.contexts }}"
    definition:
      apiVersion: v1
      kind: Secret
      data:
        ca.crt: "{{ var_ca_crt | b64encode }}"
        client.root.crt: "{{ var_client_root_crt | b64encode }}"
        client.root.key: "{{ var_client_root_key | b64encode }}"
      metadata:
        name: cockroachdb.client.root
        namespace: cockroachdb
      type: Opaque
  loop: "{{ clusters }}"


- name: Create the certificate and key pair for your CockroachDB nodes
  ansible.builtin.command: "{{ cockroach }} cert create-node localhost 127.0.0.1 cockroachdb-public cockroachdb-public.cockroachdb cockroachdb-public.cockroachdb.svc.cluster.local *.cockroachdb *.cockroachdb.cockroachdb *.cockroachdb.cockroachdb.svc.cluster.local *.us-east-2.cockroachdb.cockroachdb.svc.clusterset.local *.us-west-2.cockroachdb.cockroachdb.svc.clusterset.local *.ap-southeast-1.cockroachdb.cockroachdb.svc.clusterset.local *.cockroachdb.cockroachdb.svc.clusterset.local --certs-dir={{ role_path }}/files/certs --ca-key={{ role_path }}/files/my-safe-directory/ca.key"
  args:
    creates: "{{ role_path }}/files/certs/node.crt"

- name: Fetch created node client certificate
  set_fact:
    node_crt: "{{ lookup('file', '{{ role_path }}/files/certs/node.crt') }}"

- name: Fetch created node client key
  set_fact:
    node_key: "{{ lookup('file', '{{ role_path }}/files/certs/node.key') }}"

- name: Create cockroachdb.node secret on managed item
  kubernetes.core.k8s:
    state: present
    context: "{{ item.contexts }}"
    definition:
      apiVersion: v1
      kind: Secret
      data:
        ca.crt: "{{ var_ca_crt | b64encode }}"
        client.root.crt: "{{ var_client_root_crt | b64encode }}"
        client.root.key: "{{ var_client_root_key | b64encode }}"
        node.crt: "{{ node_crt | b64encode }}"
        node.key: "{{ node_key | b64encode }}"
      metadata:
        name: cockroachdb.node
        namespace: cockroachdb
      type: Opaque
  loop: "{{ clusters }}"

- name: Create channel for cockroachdb application in ACM
  kubernetes.core.k8s:
    wait: yes
    state: present
    context: "{{ hub_context }}"
    definition:
      apiVersion: apps.open-cluster-management.io/v1
      kind: Channel
      metadata:
        name: cockroachdb-app-latest
        namespace: cockroachdb
      spec:
        type: GitHub
        pathname: "{{ app_repo }}"

- name: Create cockroachdb application in ACM
  kubernetes.core.k8s:
    wait: yes
    state: present
    context: "{{ hub_context }}"
    definition:
      apiVersion: app.k8s.io/v1beta1
      kind: Application
      metadata:
        name: cockroachdb-app
        namespace: cockroachdb
      spec:
        componentKinds:
        - group: apps.open-cluster-management.io
          kind: Subscription
        descriptor: {}
        selector:
          matchLabels:
            app: cockroachdb-app

- name: Create cockroachdb subscription in ACM
  kubernetes.core.k8s:
    state: present
    context: "{{ hub_context }}"
    definition:
      apiVersion: apps.open-cluster-management.io/v1
      kind: Subscription
      metadata:
        name: cockroachdb-cluster{{ my_idx }}
        namespace: cockroachdb
        labels:
          app: cockroachdb-app
        annotations:
          apps.open-cluster-management.io/github-path: resources/cockroachdb/cluster{{ my_idx|string }}
          apps.open-cluster-management.io/git-branch: main
      spec:
        channel: cockroachdb/cockroachdb-app-latest
        placement:
          clusters:
            - name: "{{ item.name }}"
  loop: "{{ clusters }}"
  loop_control:
    index_var: my_idx

- name: Create cockroachdb placement rule in ACM
  kubernetes.core.k8s:
    state: present
    context: "{{ hub_context }}"
    definition:
      apiVersion: apps.open-cluster-management.io/v1
      kind: PlacementRule
      metadata:
        name: cockroachdb-clusters
        namespace: cockroachdb
      spec:
        clusterConditions:
          - type: ManagedClusterConditionAvailable
            status: "True"
        clusterSelector:
          matchLabels:
            usage: cockroachdb

- name: Create the serviceExport for cockroachdb service
  kubernetes.core.k8s:
    wait: yes
    state: present
    context: "{{ item.contexts }}"
    definition:
      apiVersion: multicluster.x-k8s.io/v1alpha1
      kind: ServiceExport
      metadata:
        name: cockroachdb
        namespace: cockroachdb
  loop: "{{ clusters }}"
