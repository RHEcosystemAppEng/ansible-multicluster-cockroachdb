---
- name: Get Cluster Region
  ansible.builtin.shell: "{{ kubectl }} cluster-info dump --context {{ item.contexts }} | grep topology.kubernetes.io/region | awk 'FNR == 1 { print $2}' | tr -d '\",' "
  loop: "{{ clusters }}"
  register: region


- name: Append Regions
  loop_control:
    index_var: my_idx
  set_fact:
    region_clusters: "{{ clusters | default({}) | combine ({ 'region' : item.stdout }) }}"
  with_items: "{{ region.results }}"

- name: Get Cluster AZ
  ansible.builtin.shell: "{{ kubectl }} cluster-info dump --context {{ item.contexts }} | grep topology.kubernetes.io/zone | awk 'FNR == 1 { print $2}' | tr -d '\",'"
  loop: "{{ clusters }}"
  register: zone


- name: Append AZs
  set_fact:
    updated_clusters: "{{ region_clusters | default({}) | combine ({ 'az' : item.stdout }) }}"
  with_items: "{{ zone.results }}"

- name: Print clusters
  debug: var=clusters

# - name: Print return zone information
#   loop_control:
#     index_var: my_idx
#   ansible.builtin.debug:
#     var: zone_{{ my_idx }}
#     verbosity: 2
#   loop: "{{ clusters }}"

# - name: Fetch import and klusterlet secrets for managed clusters
#   set_fact:
#     importSecret_{{ my_idx }}: "{{ lookup('kubernetes.core.k8s', kind='Secret', namespace=item.name , resource_name=item.name + '-import') }}"
#     register: importSecret_{{ my_idx }}
#   loop: "{{ clusters }}"
#   loop_control:
#     index_var: my_idx

# - name: Create klusterlet CRD yaml in files directory
#   ansible.builtin.shell: echo "{{ vars['importSecret_' + my_idx|string]["data"]["crds.yaml"] }}" | base64 --decode > {{ role_path }}/files/{{ item.name }}-klusterlet-crd.yaml
#   args:
#     creates: "{{ role_path }}/files/{{ item.name }}-klusterlet-crd.yaml"
#   loop: "{{ clusters }}"
#   loop_control:
#     index_var: my_idx